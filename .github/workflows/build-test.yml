name: Build and Test

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  FR_MODEL_DIR: /tmp/models
  CI: 1

jobs:
  setup:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo "VERSION=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

  windows-vs2022:
    needs: [setup]
    runs-on: windows-latest
    env:
      PACKAGENAME: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-windows-vs2022
    steps:
    - uses: actions/checkout@v4
    - name: build-x64
      run: |
        mkdir build-x64 && cd build-x64
        cmake -A x64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DFR_ENABLE_NCNN=ON -DFR_ENABLE_WEBRWKV=ON -DFR_BUILD_SHARED_LIB=ON -DCMAKE_POLICY_VERSION_MINIMUM="3.5" ..
        cmake --build . --config ${{env.BUILD_TYPE}} -j4
    - name: build-x86
      run: |
        mkdir build-x86 && cd build-x86
        cmake -T v143,host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DFR_ENABLE_NCNN=ON -DFR_BUILD_SHARED_LIB=ON -DCMAKE_POLICY_VERSION_MINIMUM="3.5" ..
        cmake --build . --config ${{env.BUILD_TYPE}} -j4
    - name: build-arm64
      run: |
        mkdir build-arm64 && cd build-arm64
        cmake -T v143,host=x64 -A arm64 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DFR_ENABLE_NCNN=ON -DFR_ENABLE_QNN=ON -DFR_BUILD_SHARED_LIB=ON -DCMAKE_POLICY_VERSION_MINIMUM="3.5" ..
        cmake --build . --config ${{env.BUILD_TYPE}} -j4
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}/x64
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/arm64
        Copy-Item -Path build-x64/Release/*.dll -Destination ${{ env.PACKAGENAME }}/x64 -Recurse
        Copy-Item -Path build-x86/Release/*.dll -Destination ${{ env.PACKAGENAME }}/x86 -Recurse
        Copy-Item -Path build-arm64/Release/*.dll -Destination ${{ env.PACKAGENAME }}/arm64 -Recurse
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  openmp-ios:
    runs-on: macos-14
    env:
      DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer
      IOS_DEPLOYMENT_TARGET: '13.0'
      ENABLE_BITCODE: OFF
      ENABLE_ARC: OFF
      ENABLE_VISIBILITY: OFF
      EMSCRIPTEN_VERSION: 3.1.28
    steps:
    - name: cache-openmp
      id: cache-openmp
      uses: actions/cache@v4
      with:
        path: openmp-install
        key: openmp-ios-release-11.0.0-20230504
    - name: checkout
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
    - name: openmp
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/openmp-11.0.0.src.tar.xz
        tar -xf openmp-11.0.0.src.tar.xz
        cd openmp-11.0.0.src
        sed -i'' -e '/.size __kmp_unnamed_critical_addr/d' runtime/src/z_Linux_asm.S
        sed -i'' -e 's/__kmp_unnamed_critical_addr/___kmp_unnamed_critical_addr/g' runtime/src/z_Linux_asm.S
    - name: build-arm64
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        cd openmp-11.0.0.src
        mkdir -p build-arm64 && cd build-arm64
        cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/ios.toolchain.cmake -DPLATFORM=OS64 -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install \
            -DPERL_EXECUTABLE=/usr/bin/perl \
            -DLIBOMP_ENABLE_SHARED=OFF -DLIBOMP_OMPT_SUPPORT=OFF -DLIBOMP_USE_HWLOC=OFF ..
        cmake --build . -j 8
        cmake --build . --target install/strip
    - name: merge-fat-library
      if: steps.cache-openmp.outputs.cache-hit != 'true'
      run: |
        rm -rf $GITHUB_WORKSPACE/openmp-install
        mkdir -p $GITHUB_WORKSPACE/openmp-install
        cp -a openmp-11.0.0.src/build-arm64/install/include $GITHUB_WORKSPACE/openmp-install
        mkdir -p $GITHUB_WORKSPACE/openmp-install/lib
        cp -a openmp-11.0.0.src/build-arm64/install/lib/libomp.a $GITHUB_WORKSPACE/openmp-install/lib/libomp.a
    - name: upload
      uses: actions/upload-artifact@v4
      with:
        name: openmp-ios
        path: openmp-install
  ios:
    needs: [setup, openmp-ios]
    runs-on: macos-14
    env:
      PACKAGENAME: libfaster-rwkv-static-${{ needs.setup.outputs.VERSION }}-ios
      DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer
      IOS_DEPLOYMENT_TARGET: '13.0'
      ENABLE_BITCODE: OFF
      ENABLE_ARC: OFF
      ENABLE_VISIBILITY: OFF
      EMSCRIPTEN_VERSION: 3.1.28
    steps:
    - uses: actions/checkout@v4
    - name: download-openmp-ios
      uses: actions/download-artifact@v4
      with:
        name: openmp-ios
        path: openmp-ios
    - name: install-openmp
      run: |
        sudo cp openmp-ios/include/* $DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/include
        sudo cp openmp-ios/lib/libomp.a $DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib
    - name: build-arm64
      run: |
        mkdir build-arm64 && cd build-arm64
        cmake -DFR_ENABLE_NCNN=ON -DFR_BUILD_STATIC_WRAPPER_LIB=ON -DFR_BUILD_EXECUTABLE=OFF -DFR_ENABLE_WEBRWKV=ON \
            -GXcode -DCMAKE_TOOLCHAIN_FILE=../cmake/ios.toolchain.cmake -DPLATFORM=OS64 -DARCHS="arm64" \
            -DDEPLOYMENT_TARGET=$IOS_DEPLOYMENT_TARGET -DENABLE_BITCODE=$ENABLE_BITCODE -DENABLE_ARC=$ENABLE_ARC -DENABLE_VISIBILITY=$ENABLE_VISIBILITY \
            -DOpenMP_C_FLAGS="-Xclang -fopenmp" -DOpenMP_CXX_FLAGS="-Xclang -fopenmp" -DOpenMP_C_LIB_NAMES="libomp" \
            -DOpenMP_CXX_LIB_NAMES="libomp" -DOpenMP_libomp_LIBRARY="$DEVELOPER_DIR/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib/libomp.a" \
            -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DCMAKE_POLICY_VERSION_MINIMUM=3.5 ..
        cmake --build . -j 8
        cmake --build . --target install --config Release
        cd ..
    - name: build-web-rwkv
      run: |
        git clone https://github.com/cryscan/web-rwkv-ffi && cd web-rwkv-ffi
        rustup target add aarch64-apple-ios
        cargo build --release --target aarch64-apple-ios
    - name: package
      run: |
        mkdir native
        cp -a build-arm64/install/lib/libfaster_rwkv_static.a native/libfaster_rwkv_static.a
        rm -f ${{ env.PACKAGENAME }}.zip
        pushd native
        zip -9 -y -r ../${{ env.PACKAGENAME }}.zip libfaster_rwkv_static.a ../web-rwkv-ffi/target/aarch64-apple-ios/release/libweb_rwkv_ffi.a
        popd
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos-aarch64:
    needs: [setup]
    runs-on: macos-15
    env:
      PACKAGENAME: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-macos-aarch64
    steps:
    - uses: actions/checkout@v4
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DFR_ENABLE_NCNN=ON -DFR_ENABLE_WEBRWKV=ON -DFR_BUILD_SHARED_LIB=ON -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_POLICY_VERSION_MINIMUM=3.5 ..
        cmake --build . -j8
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -a build/*.dylib ${{ env.PACKAGENAME }}
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos-x64:
    needs: [setup]
    runs-on: macos-15-large
    env:
      PACKAGENAME: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-macos-x64
    steps:
    - uses: actions/checkout@v4
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DFR_ENABLE_NCNN=ON -DFR_ENABLE_WEBRWKV=ON -DFR_BUILD_SHARED_LIB=ON -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_POLICY_VERSION_MINIMUM=3.5 ..
        cmake --build . -j8
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -a build/*.dylib ${{ env.PACKAGENAME }}
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip
  
  macos-universal:
    needs: [setup, macos-x64, macos-aarch64]
    runs-on: macos-14
    env:
      PACKAGENAME: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-macos-universal
    steps:
    - name: download-macos-x64
      uses: actions/download-artifact@v4
      with:
        name: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-macos-x64
    - name: download-macos-aarch64
      uses: actions/download-artifact@v4
      with:
        name: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-macos-aarch64
    - name: create-universal
      run: |
        rm -rf build-universal build-x64 build-arm64
        mkdir build-x64 && cd build-x64
        unzip ../libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-macos-x64.zip
        cd ..
        mkdir build-arm64 && cd build-arm64
        unzip ../libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-macos-aarch64.zip
        cd ..
        mkdir build-universal && cd build-universal
        lipo -create ../build-x64/libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-macos-x64/libfaster_rwkvd.dylib ../build-arm64/libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-macos-aarch64/libfaster_rwkvd.dylib -output libfaster_rwkvd.dylib
    - name: package
      run: |
        rm -f ${{ env.PACKAGENAME }}.zip
        pushd build-universal
        zip -9 -y -r ../${{ env.PACKAGENAME }}.zip libfaster_rwkvd.dylib
        popd
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-x64:
    needs: [setup]
    runs-on: ubuntu-22.04
    env:
      PACKAGENAME: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-linux-x64
    steps:
    - uses: actions/checkout@v4
    - name: Install Ninja
      run: |
        sudo apt-get install ninja-build
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DFR_ENABLE_NCNN=ON -DFR_ENABLE_WEBRWKV=ON -DFR_BUILD_SHARED_LIB=ON -GNinja -DCMAKE_POLICY_VERSION_MINIMUM=3.5 ..
        cmake --build .
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -a build/*.so ${{ env.PACKAGENAME }}
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  ubuntu-aarch64:
    needs: [setup]
    runs-on: ubuntu-22.04-arm
    env:
      PACKAGENAME: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-linux-aarch64
    steps:
    - uses: actions/checkout@v4
    - name: Install Ninja
      run: |
        sudo apt-get install ninja-build
    - name: build
      run: |
        mkdir build && cd build
        cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DFR_ENABLE_NCNN=OFF -DFR_ENABLE_WEBRWKV=ON -DFR_ENABLE_RWKVCPP=ON -DGGML_NATIVE=OFF -DGGML_CPU_ARM_ARCH="armv8.2-a" -DFR_BUILD_SHARED_LIB=ON -GNinja -DCMAKE_POLICY_VERSION_MINIMUM=3.5 ..
        cmake --build .
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -a build/*.so ${{ env.PACKAGENAME }}
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  aarch64-android-ndk-28:
    needs: [setup]
    runs-on: ubuntu-22.04
    env:
      PACKAGENAME: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-aarch64-android-ndk-28
    steps:
    - uses: actions/checkout@v4
    - name: Install Ninja
      run: |
        sudo apt-get install ninja-build
    - name: ndk-r25c
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        rustup target add --toolchain stable-x86_64-unknown-linux-gnu aarch64-linux-android
        sudo apt-get update
        sudo apt-get install -y libncurses5
        wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip -O $GITHUB_WORKSPACE/android-ndk-r25c-linux.zip
        cd $GITHUB_WORKSPACE && unzip -q android-ndk-r25c-linux.zip
    - name: build
      run: |
        mkdir build && cd build
        cmake -DFR_ENABLE_NCNN=ON -DFR_ENABLE_QNN=ON -DFR_ENABLE_MTK=ON -DFR_ENABLE_WEBRWKV=ON -DFR_ENABLE_RWKVCPP=ON -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-28 -DANDROID_NDK=$GITHUB_WORKSPACE/android-ndk-r25c -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/android-ndk-r25c/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DFR_BUILD_SHARED_LIB=ON -GNinja -DCMAKE_POLICY_VERSION_MINIMUM=3.5 ..
        cmake --build .
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -a build/*.so ${{ env.PACKAGENAME }}
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  build-and-test:
    needs: [setup, ubuntu-x64, ubuntu-aarch64, aarch64-android-ndk-28, windows-vs2022, ios]
    # Use ubuntu 22.04 to build with enough old glibc, so that products can be distributed to more Linux distributions
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        # The dependency 'networkx' of ChatRWKV requires Python>=3.9
        python-version: '3.9' 

    - name: Install Ninja
      run: |
        sudo apt-get install ninja-build

    # - name: Download Tokenizer and ChatRWKV Models
    #   run: |
    #     mkdir ${{env.FR_MODEL_DIR}}
    #     cd ${{env.FR_MODEL_DIR}}
    #     wget https://huggingface.co/BlinkDL/rwkv-4-world/resolve/main/RWKV-4-World-0.1B-v1-20230520-ctx4096.pth 
    #     wget https://huggingface.co/BlinkDL/rwkv-5-world/resolve/main/RWKV-5-World-0.1B-v1-20230803-ctx4096.pth
    #     wget https://huggingface.co/BlinkDL/rwkv-5-music/resolve/main/RWKV-5-ABC-82M-v1-20230901-ctx1024.pth
    #     wget https://huggingface.co/daquexian/fr-models/resolve/dd4d636/world_tokenizer -O old_world_tokenizer
    #     mkdir -p RWKV-5-World-0.1B-v1-20230803-ctx4096/ncnn/fp16
    #     cd RWKV-5-World-0.1B-v1-20230803-ctx4096/ncnn/fp16
    #     wget https://huggingface.co/daquexian/fr-models/resolve/02382cd/RWKV-5-World-0.1B-v1-20230803-ctx4096/ncnn/fp16/RWKV-5-World-0.1B-v1-20230803-ctx4096-ncnn.bin
    #     wget https://huggingface.co/daquexian/fr-models/resolve/02382cd/RWKV-5-World-0.1B-v1-20230803-ctx4096/ncnn/fp16/RWKV-5-World-0.1B-v1-20230803-ctx4096-ncnn.param
    #     wget https://huggingface.co/daquexian/fr-models/resolve/02382cd/RWKV-5-World-0.1B-v1-20230803-ctx4096/ncnn/fp16/RWKV-5-World-0.1B-v1-20230803-ctx4096-ncnn.config
    #     wget https://huggingface.co/daquexian/fr-models/resolve/main/RWKV-5-World-0.1B-v1-20230803-ctx4096/ncnn/fp16/tokenizer
    #     cd ${{env.FR_MODEL_DIR}}
    #     mkdir tokenizers
    #     cd tokenizers
    #     wget https://huggingface.co/daquexian/fr-models/resolve/main/tokenizers/world_tokenizer
    #     wget https://huggingface.co/daquexian/fr-models/resolve/main/tokenizers/simple_abc_tokenizer
    #     wget https://huggingface.co/daquexian/fr-models/resolve/main/tokenizers/abc_tokenizer_v20230913

    # - name: Convert ChatRWKV Models
    #   run: |
    #     git clone https://github.com/BlinkDL/ChatRWKV
    #     cd ChatRWKV
    #     pip install -r requirements.txt
    #     pip install numpy
    #     pip install torch --index-url https://download.pytorch.org/whl/cpu
    #     cd rwkv_pip_package
    #     pip install .
    #     cd ..
    #     python3 v2/convert_model.py --in ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096.pth  --out ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp32-converted.pth --strategy "cuda fp32"
    #     python3 v2/convert_model.py --in ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096.pth  --out ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp16-converted.pth --strategy "cuda fp16"
    #     python3 v2/convert_model.py --in ${{env.FR_MODEL_DIR}}/RWKV-5-World-0.1B-v1-20230803-ctx4096.pth  --out ${{env.FR_MODEL_DIR}}/RWKV-5-World-0.1B-v1-20230803-ctx4096-fp32-converted.pth --strategy "cuda fp32"
    #     python3 v2/convert_model.py --in ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024.pth  --out ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-fp32-converted.pth --strategy "cuda fp32"
    #     cd ..
    #     pip install -r tools/requirements.txt
    #     python3 tools/convert_weight.py ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp32-converted.pth ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp32.fr
    #     python3 tools/convert_weight.py ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp16-converted.pth ${{env.FR_MODEL_DIR}}/RWKV-4-World-0.1B-v1-20230520-ctx4096-fp16.fr
    #     python3 tools/convert_weight.py ${{env.FR_MODEL_DIR}}/RWKV-5-World-0.1B-v1-20230803-ctx4096-fp32-converted.pth ${{env.FR_MODEL_DIR}}/RWKV-5-World-0.1B-v1-20230803-ctx4096-fp32.fr
    #     python3 tools/convert_weight.py ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-fp32-converted.pth ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-fp32.fr

    # - name: Build
    #   run: |
    #     cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DFR_ENABLE_NCNN=ON -DFR_ENABLE_TESTS=ON -GNinj
    #     cmake --build ${{github.workspace}}/build

    # - name: Upload Executables
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: export_ncnn
    #     path: |
    #       build/tools/export_ncnn

    # - name: Run C++ tests
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: |
    #     FR_MODEL_DIR=${{env.FR_MODEL_DIR}} ctest --output-on-failure --test-dir tests
    #   working-directory: ${{github.workspace}}/build/

    # - name: Convert the v5 ABC model to ncnn for ABC ppl test
    #   run: |
    #     ${{github.workspace}}/build/tools/export_ncnn ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-fp32.fr ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-ncnn fp16

    # - name: Run ABC ppl test
    #   run: |
    #     pip install datasets msgpack
    #     python3 tests/run_abc_benchmark.py ${{github.workspace}}/build/tests/run_abc_benchmark ${{env.FR_MODEL_DIR}}/RWKV-5-ABC-82M-v1-20230901-ctx1024-ncnn

    # - name: Build Python wheel
    #   run: |
    #     python3 -m pip install -U pip
    #     python3 -m pip wheel .
    #     python3 -m pip install fasterrwkv*.whl
    #   working-directory: ${{github.workspace}}/python

    # - name: Run Python tests
    #   run: |
    #     python3 -m pip install pytest
    #     FR_MODEL_DIR=${{env.FR_MODEL_DIR}} pytest tests
    #   working-directory: ${{github.workspace}}/python

    # - name: Upload Python wheel
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: fasterrwkv-wheels
    #     path: |
    #       python/fasterrwkv*.whl

    - uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Build Android AAR
      run: |
        # android toolchain cmake file hardcode '-g', making the binary bigger
        sed -i 's/ -g$//' $ANDROID_NDK/build/cmake/android-legacy.toolchain.cmake
        ./aar/build_aar.sh

    - name: Upload Android AAR libraries
      uses: actions/upload-artifact@v4
      with:
        name: Android AAR Packages
        path: |
          aar/java/faster-rwkv-java/build/outputs/aar/*

    - name: Rename Android binaries to upload
      run: |
        mv build-android-aar/examples/chat build-android-aar/chat-android
        mv build-android-aar/examples/abc_music build-android-aar/abc_music-android
        mv build-android-aar/examples/midi_music build-android-aar/midi_music-android

    - name: Upload Android binaries
      uses: actions/upload-artifact@v4
      with:
        name: Android binaries
        path: |
          build-android-aar/chat-android
          build-android-aar/abc_music-android
          build-android-aar/midi_music-android

    - name: Download artifact from job ubuntu-2204
      uses: actions/download-artifact@v4
      with:
        name: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-linux-x64
    
    - name: Download artifact from job ubuntu-aarch64
      uses: actions/download-artifact@v4
      with:
        name: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-linux-aarch64
    
    - name: Download artifact from job aarch64-android-ndk-28
      uses: actions/download-artifact@v4
      with:
        name: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-aarch64-android-ndk-28

    - name: Download artifact from job windows-vs2022
      uses: actions/download-artifact@v4
      with:
        name: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-windows-vs2022
    
    - name: Download artifact from job ios
      uses: actions/download-artifact@v4
      with:
        name: libfaster-rwkv-static-${{ needs.setup.outputs.VERSION }}-ios

    - name: Download artifact from job macos-universal
      uses: actions/download-artifact@v4
      with:
        name: libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-macos-universal

    - uses: "marvinpinto/action-automatic-releases@latest"
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build"
        files: |
          build/tools/export_ncnn
          aar/java/faster-rwkv-java/build/outputs/aar/faster-rwkv-java-release.aar
          build-android-aar/chat-android
          build-android-aar/abc_music-android
          build-android-aar/midi_music-android
          libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-linux-x64.zip
          libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-linux-aarch64.zip
          libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-aarch64-android-ndk-28.zip
          libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-windows-vs2022.zip
          libfaster-rwkv-static-${{ needs.setup.outputs.VERSION }}-ios.zip
          libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-macos-universal.zip

    - uses: "marvinpinto/action-automatic-releases@latest"
      if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') }}
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: false
        files: |
          build/tools/export_ncnn
          aar/java/faster-rwkv-java/build/outputs/aar/faster-rwkv-java-release.aar
          build-android-aar/chat-android
          build-android-aar/abc_music-android
          build-android-aar/midi_music-android
          libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-linux-x64.zip
          libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-linux-aarch64.zip
          libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-aarch64-android-ndk-28.zip
          libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-windows-vs2022.zip
          libfaster-rwkv-static-${{ needs.setup.outputs.VERSION }}-ios.zip
          libfaster-rwkvd-${{ needs.setup.outputs.VERSION }}-macos-universal.zip
